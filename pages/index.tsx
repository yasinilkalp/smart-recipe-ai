import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { TextField } from "@mui/material";
import { useState } from "react";
import { LoadingButton } from "@mui/lab";
import { CloseOutline, SearchOutline } from "@styled-icons/evaicons-outline";
import axios from "axios";
import Input from "@mui/material/Input";
import { Tag } from "@styled-icons/material-rounded";
import { Plus } from "@styled-icons/bootstrap";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [material, setMaterial] = useState<string>("");
  const [materials, setMaterials] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [result, setResult] = useState<any[]>([]);

  const addMaterial = () => {
    setMaterials([...materials, material]);
    setMaterial("");
  };

  const findRecipe = async () => {
    setLoading(true);
    let request = {
      prompt: `${materials
        .map((x) => x)
        .join(
          ", "
        )} malzemeleri ile yemek, tatlı veya benzer bir tarif verir misin?`,
      max_tokens: 500,
      temperature: 0.5,
    };
    let response = await axios.post(
      "https://api.openai.com/v1/engines/text-davinci-003/completions",
      request,
      {
        headers: {
          Authorization: `Bearer ${process.env.NEXT_PUBLIC_AI_TOKEN}`,
        },
      }
    );
    console.log(response);
    if (response && response.status === 200) {
      setResult(response.data.choices);
    }
    setLoading(false);
  };

  const resetRecipe = () => {
    setMaterial("");
    setMaterials([]);
    setResult([]);
  };

  return (
    <>
      <Head>
        <title>Akıllı Yemek Tarifleri</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen max-w-lg mx-auto w-full flex justify-center items-center">
        <div className="bg-white w-full shadow-sm rounded-md pt-6">
          <div className={styles.material_content}>
            <Tag className={styles.material_icon} />
            <Input
              id="material"
              placeholder="Malzeme adı yazınız"
              className={styles.material_input}
              onChange={(e) => setMaterial(e.target.value)}
              onKeyUp={(e) => {
                if (e.code === "Enter") addMaterial();
              }}
              value={material}
            />
            <button
              type="button"
              className={styles.material_add_button}
              onClick={addMaterial}
            >
              <Plus className="w-6" />
            </button>
          </div>
          {materials && materials.length > 0 && (
            <div className="flex flex-wrap gap-3 mx-6 mb-3">
              {materials &&
                materials.map((item, index) => {
                  return (
                    <div
                      key={index}
                      className="bg-gray-50 text-gray-400 rounded-sm border shadow-sm flex items-center justify-center pl-3"
                    >
                      <span>{item}</span>
                      <button
                        type="button"
                        className="w-8 h-8 border-l ml-3"
                        onClick={() => {
                          setMaterials(materials.filter((x) => x !== item));
                        }}
                      >
                        <CloseOutline className="w-4" />
                      </button>
                    </div>
                  );
                })}
            </div>
          )}

          <div className="flex mx-6 space-x-3">
            <LoadingButton
              loading={loading}
              disabled={materials && materials.length < 3}
              variant="outlined"
              className={styles.recipe_button}
              onClick={findRecipe}
            >
              <SearchOutline className="w-4 mr-2" /> TARİF BUL
            </LoadingButton>
            {result && result.length > 0 && (
              <button
                className={styles.recipe_again_button}
                onClick={resetRecipe}
              >
                Yeniden Dene
              </button>
            )}
          </div>
          {result && result.length > 0 && (
            <div className={styles.recipe_results}>
              {result &&
                result.map((item: any) => {
                  return (
                    <div
                      key={item.index}
                      className="whitespace-pre-line leading-6"
                    >
                      {item.text}
                    </div>
                  );
                })}
            </div>
          )}
        </div>
      </main>
    </>
  );
}
